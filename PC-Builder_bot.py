import asyncio  # –ú–æ–¥—É–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
import logging  # –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from aiogram import Bot, Dispatcher, types, F   # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
from aiogram.filters import CommandStart    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
import os   # –†–∞–±–æ—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from dotenv import load_dotenv  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from aiogram.fsm.state import State, StatesGroup    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Finite State Machine (FSM)
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder  # –ù–∞–±–æ—Ä —É—Ç–∏–ª–∏—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
import sqlite3 as sq    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from typing import Dict, List, Optional    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API
if not BOT_TOKEN:
    logging.error('–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env')
    exit()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
MIN_BUDGETS = {
    'cpu': 2699,
    'motherboard': 4499,
    'ram': 450,
    'cooling_system': 299,
    'psu': 899,
    'case': 1899,
    'gpu': 5499,
    'ssd': 950,
    'nvme': 1699,
    'hdd': 4699
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    MAIN_MENU = State()    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    CHOOSING_TYPE = State()    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ü–ö
    WAITING_FOR_BUDGET = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
    SHOW_NEXT_PC = State()    # –í—ã–≤–æ–¥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ü–ö
    CONFIGURATION_START = State()   # –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ü–ö
    CPU_BRAND_SELECTION = State()   # –í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    AUTO_BUILD_RESULT = State()    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö

class PCBuilder:
    @staticmethod
    def get_cpu_brands() -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
        with sq.connect("PC.db") as con:
            cur = con.cursor()
            cur.execute("SELECT DISTINCT manufacturer FROM cpu")
            return [row[0] for row in cur.fetchall()]

    @staticmethod
    def find_best_ready_pc(profile_type: str, budget: int) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–π –≥–æ—Ç–æ–≤—ã–π –ü–ö –ø–æ —Ç–∏–ø—É –∏ –±—é–¥–∂–µ—Ç—É"""
        with sq.connect("PC.db") as con:
            con.row_factory = sq.Row
            cur = con.cursor()

            cur.execute("SELECT * FROM pc_profiles WHERE type=?", (profile_type,))
            profile = cur.fetchone()

            if not profile:
                return None

            conditions = [
                "cores >= ?",
                "ram >= ?",
                "ssd >= ?",
                "price <= ?"
            ]
            params = [
                profile['min_cpu_cores'],
                profile['min_ram'],
                profile['min_ssd_gb'],
                budget
            ]

            if profile['gpu_required']:
                conditions.append("video_card_type LIKE '%Discrete%'")

            query = f"""
                SELECT * FROM pc 
                WHERE {" AND ".join(conditions)}  
                ORDER BY price DESC, rating DESC 
                LIMIT 1
            """

            cur.execute(query, params)
            return cur.fetchone()

    @staticmethod
    def find_next_ready_pc(profile_type: str, budget: int, exclude_names: List[str]) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ü–ö"""
        with sq.connect("PC.db") as con:
            con.row_factory = sq.Row
            cur = con.cursor()

            cur.execute("SELECT * FROM pc_profiles WHERE type=?", (profile_type,))
            profile = cur.fetchone()

            if not profile:
                return None

            conditions = [
                "cores >= ?",
                "ram >= ?",
                "ssd >= ?",
                "price <= ?"
            ]
            params = [
                profile['min_cpu_cores'],
                profile['min_ram'],
                profile['min_ssd_gb'],
                budget
            ]

            if profile['gpu_required']:
                conditions.append("video_card_type LIKE '%Discrete%'")

            if exclude_names:
                conditions.append(f"pc_name NOT IN ({','.join(['?'] * len(exclude_names))})")
                params.extend(exclude_names)

            query = f"""
                SELECT * FROM pc 
                WHERE {" AND ".join(conditions)} 
                ORDER BY price DESC, rating DESC 
                LIMIT 1
            """
            cur.execute(query, params)
            return cur.fetchone()

    @staticmethod
    def format_pc_info(pc: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ü–ö"""
        return (
                f"üíª *{pc['pc_name']}*\n\n"
                f"‚öôÔ∏è *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
                f"- –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {pc['processor']} ({pc['cores']} —è–¥–µ—Ä, {pc['threads']} –ø–æ—Ç–æ–∫–æ–≤)\n"
                f"- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {pc['video_card_type']} {pc['video_card_model']} ({pc['video_memory']} –ì–ë)\n"
                f"- –ü–∞–º—è—Ç—å: {pc['ram']} –ì–ë {pc['ram_type']}\n"
                f"- –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å: SSD {pc['ssd']} –ì–ë" + (f", HDD {pc['hdd']} –ì–ë" if pc['hdd'] else "") + "\n"
                f"- –û–°: {pc['os']}\n\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {pc['rating']}/5\n"
                f"üí∞ –¶–µ–Ω–∞: {pc['price']} ‚ÇΩ"
        )


    @staticmethod
    def get_budget_distribution(pc_type: str, total_budget: int) -> Dict[str, float]:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ü–ö"""
        distributions = {
            '–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä': {
                'cpu': 0.2,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                'gpu': 0.3,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
                'motherboard': 0.09,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
                'ram': 0.1,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                'cooling_system': 0.04,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                'nvme': 0.05,  # NVMe –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
                'hdd': 0.05,  # HDD
                'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                'case': 0.07  # –ö–æ—Ä–ø—É—Å
            },
            '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π': {
                'cpu': 0.25,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                'gpu': 0.25,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
                'motherboard': 0.09,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
                'ram': 0.1,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                'cooling_system': 0.03,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                'nvme': 0.06,  # NVMe –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
                'hdd': 0.05,  # HDD
                'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                'case': 0.07  # –ö–æ—Ä–ø—É—Å
            },
            '–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä': {
                'cpu': 0.2,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                'gpu': 0.05,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
                'motherboard': 0.1,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
                'ram': 0.15,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                'cooling_system': 0.1,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                'ssd': 0.2,  # SSD
                'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                'case': 0.1  # –ö–æ—Ä–ø—É—Å
            },
            '–°–µ—Ä–≤–µ—Ä': {
                'cpu': 0.21,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                'gpu': 0.02,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
                'motherboard': 0.10,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
                'ram': 0.19,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                'cooling_system': 0.1,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                'nvme': 0.1,  # NVMe –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
                'hdd': 0.1,  # HDD
                'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                'case': 0.07  # –ö–æ—Ä–ø—É—Å
            },
            '–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä': {
                'cpu': 0.17,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                'gpu': 0.15,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
                'motherboard': 0.1,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
                'ram': 0.15,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                'cooling_system': 0.1,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                'nvme': 0.1,  # NVMe –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
                'hdd': 0.05,  # HDD
                'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                'case': 0.1  # –ö–æ—Ä–ø—É—Å
            },
            '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è': {
                'cpu': 0.25,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                'gpu': 0.1,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
                'motherboard': 0.1,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
                'ram': 0.13,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                'cooling_system': 0.07,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                'ssd': 0.1,  # SSD
                'nvme': 0.1,  # NVMe –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
                'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
                'case': 0.05  # –ö–æ—Ä–ø—É—Å
            }
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        distribution = distributions.get(pc_type, {
            'cpu': 0.2,  # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
            'gpu': 0.2,  # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
            'motherboard': 0.1,  # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
            'ram': 0.1,  # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
            'cooling_system': 0.07,  # –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
            'nvme': 0.1,  # NVMe –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
            'hdd': 0.08,  # HDD
            'psu': 0.1,  # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
            'case': 0.05  # –ö–æ—Ä–ø—É—Å
        })

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        component_budgets = {comp: int(total_budget * perc)
                             for comp, perc in distribution.items()}

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã
        for component, min_price in MIN_BUDGETS.items():
            if component in component_budgets and component_budgets[component] < min_price:
                # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                needed = min_price - component_budgets[component]
                if component != 'hdd':
                    component_budgets['hdd'] = max(0, component_budgets.get('hdd', 0) - needed * 0.7)
                if component != 'case':
                    component_budgets['case'] = max(0, component_budgets.get('case', 0) - needed * 0.3)
                component_budgets[component] = min_price

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö —Å–±–æ—Ä–æ–∫
        if total_budget > 100000:
            scale = min(1.5, total_budget / 100000)
            for comp in ['cpu', 'gpu', 'ram', 'nvme']:
                if comp in component_budgets:
                    component_budgets[comp] = int(component_budgets[comp] * scale)

            # –£–º–µ–Ω—å—à–∞–µ–º –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            for comp in ['hdd', 'case']:
                if comp in component_budgets:
                    component_budgets[comp] = int(component_budgets[comp] * 0.8)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ü–ö
        if pc_type in ['–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–°–µ—Ä–≤–µ—Ä']:
            component_budgets['gpu'] = min(component_budgets.get('gpu', 0), 5000)
            if 'nvme' in component_budgets:
                component_budgets['nvme'] = min(component_budgets['nvme'], 10000)
                component_budgets['ssd'] = component_budgets.get('ssd', 0) + component_budgets['nvme'] // 2

        if pc_type == '–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä':
            component_budgets['nvme'] = max(component_budgets.get('nvme', 0), 15000)
            if component_budgets.get('ssd', 0) > 5000:
                component_budgets['ssd'] -= 3000

        return component_budgets

    @staticmethod
    def auto_build_pc(pc_type: str, total_budget: int, cpu_brand: str = None) -> Optional[Dict]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ü–ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        def get_safe(row, key, default=None):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î"""
            if hasattr(row, 'keys') and key in row.keys():
                return row[key]
            return default

        component_budgets = PCBuilder.get_budget_distribution(pc_type, total_budget)
        components = {}
        remaining_budget = total_budget
        total_power = 0
        warnings = []

        try:
            with sq.connect("PC.db") as con:
                con.row_factory = sq.Row
                cur = con.cursor()

                # 1. –ü–æ–¥–±–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (—Å–Ω–∞—á–∞–ª–∞ DDR5, –ø–æ—Ç–æ–º DDR4)
                for ram_type in ['DDR5', 'DDR4']:
                    cpu_query = """
                        SELECT * FROM cpu 
                        WHERE price <= ? 
                        AND (? IS NULL OR manufacturer = ?)
                        AND ram_type LIKE '%' || ? || '%'
                        ORDER BY cores DESC, clock_frequency DESC, price ASC
                        LIMIT 1
                    """
                    cur.execute(cpu_query, (
                        component_budgets['cpu'],
                        cpu_brand,
                        cpu_brand,
                        ram_type
                    ))
                    cpu = cur.fetchone()
                    if not cpu:
                        continue

                    # 2. –ü–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã
                    socket = get_safe(cpu, 'socket')
                    mb_query = """
                        SELECT * FROM motherboard 
                        WHERE socket = ? 
                        AND ram_type LIKE '%' || ? || '%'
                        AND price <= ?
                        ORDER BY max_ram_freq DESC, price ASC
                        LIMIT 1
                    """
                    cur.execute(mb_query, (
                        socket,
                        ram_type,
                        component_budgets['motherboard']
                    ))
                    mb = cur.fetchone()
                    if not mb:
                        continue

                    # 3. –ü–æ–¥–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
                    max_freq = get_safe(mb, 'max_ram_freq', 3200)
                    ram_modules = 2 if total_budget > 50000 else 1
                    ram_query = """
                        SELECT * FROM ram 
                        WHERE ram_type LIKE '%' || ? || '%'
                        AND clock_freq <= ?
                        AND price <= ?
                        AND moduls_in_set <= ?
                        ORDER BY amount DESC, price ASC
                        LIMIT 1
                    """
                    cur.execute(ram_query, (
                        ram_type,
                        max_freq,
                        component_budgets['ram'],
                        ram_modules
                    ))
                    ram = cur.fetchone()
                    if not ram:
                        continue

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    components.update({
                        'cpu': dict(cpu),
                        'motherboard': dict(mb),
                        'ram': dict(ram)
                    })
                    remaining_budget -= (cpu['price'] + mb['price'] + ram['price'])
                    total_power += (get_safe(cpu, 'energy', 65) + get_safe(mb, 'energy', 30) +
                                    get_safe(ram, 'energy', 5) * get_safe(ram, 'moduls_in_set', 1))
                    break
                else:
                    warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ CPU, MB –∏ RAM")
                    return None

                # 4. –ü–æ–¥–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                cooling_query = """
                    SELECT * FROM cooling_system 
                    WHERE socket LIKE '%' || ? || '%'
                    AND price <= ?
                    AND power_dissipation >= ?
                    ORDER BY power_dissipation ASC, price ASC
                    LIMIT 3
                """
                cpu_tdp = get_safe(components['cpu'], 'heat_gen', 65)
                cur.execute(cooling_query, (
                    components['cpu']['socket'],
                    component_budgets['cooling_system'],
                    cpu_tdp * 1.2  # 20% –∑–∞–ø–∞—Å
                ))
                potential_coolers = [dict(row) for row in cur.fetchall()]

                # 5. –ü–æ–¥–±–æ—Ä –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
                if pc_type in ['–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π']:
                    gpu_query = """
                        SELECT * FROM gpu 
                        WHERE price <= ?
                        AND con_interface IN (
                            SELECT pcie_v FROM motherboard 
                            WHERE motherboard_name = ?
                        )
                        ORDER BY gpu_memory DESC, price ASC
                        LIMIT 1
                    """
                    cur.execute(gpu_query, (
                        component_budgets['gpu'],
                        components['motherboard']['motherboard_name']
                    ))
                    gpu = cur.fetchone()
                    if gpu:
                        components['gpu'] = dict(gpu)
                        remaining_budget -= gpu['price']
                        total_power += get_safe(gpu, 'energy', 150)
                    else:
                        warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É")

                # 6. –ü–æ–¥–±–æ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π
                # NVMe (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
                if component_budgets.get('nvme', 0) > 0:
                    nvme_query = """
                        SELECT * FROM ssd 
                        WHERE connection_interface LIKE '%NVMe%'
                        AND price <= ?
                        ORDER BY capacity DESC, max_data_transfer_rate DESC
                        LIMIT 1
                    """
                    cur.execute(nvme_query, (
                        min(component_budgets['nvme'], remaining_budget),
                    ))
                    nvme = cur.fetchone()
                    if nvme:
                        components['nvme'] = dict(nvme)
                        remaining_budget -= nvme['price']
                        total_power += get_safe(nvme, 'energy', 5)

                # SSD (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –±—é–¥–∂–µ—Ç)
                if component_budgets.get('ssd', 0) > 0 and remaining_budget > 0:
                    ssd_query = """
                        SELECT * FROM ssd 
                        WHERE connection_interface LIKE '%SATA%'
                        AND price <= ?
                        ORDER BY capacity DESC, max_data_transfer_rate DESC
                        LIMIT 1
                    """
                    cur.execute(ssd_query, (
                        min(component_budgets['ssd'], remaining_budget),
                    ))
                    ssd = cur.fetchone()
                    if ssd:
                        components['ssd'] = dict(ssd)
                        remaining_budget -= ssd['price']
                        total_power += get_safe(ssd, 'energy', 5)

                # HDD (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –±—é–¥–∂–µ—Ç)
                if component_budgets.get('hdd', 0) > 0 and remaining_budget > 0:
                    hdd_query = """
                        SELECT * FROM storage 
                        WHERE storage_type = 'HDD'
                        AND price <= ?
                        ORDER BY capacity DESC
                        LIMIT 1
                    """
                    cur.execute(hdd_query, (
                        min(component_budgets['hdd'], remaining_budget),
                    ))
                    hdd = cur.fetchone()
                    if hdd:
                        components['hdd'] = dict(hdd)
                        remaining_budget -= hdd['price']
                        total_power += get_safe(hdd, 'energy', 7)

                # 7. –ü–æ–¥–±–æ—Ä –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
                required_power = ((total_power + 100) // 50) * 50  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 50 –í—Ç

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∞—Å –º–æ—â–Ω–æ—Å—Ç–∏
                if pc_type == '–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä':
                    required_power = max(required_power * 1.3, 650)
                elif pc_type == '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π':
                    required_power = max(required_power * 1.2, 550)
                else:
                    required_power = max(required_power, 450)

                psu_budget = max(component_budgets['psu'], MIN_BUDGETS['psu'])
                if remaining_budget > psu_budget:
                    psu_budget = min(psu_budget + remaining_budget // 2, remaining_budget)

                psu_query = """
                    SELECT * FROM psu 
                    WHERE power >= ? 
                    AND price <= ?
                    ORDER BY 
                        CASE
                            WHEN certificate = 'N' THEN 1
                            WHEN certificate IN ('Standart', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Titanium') THEN 0
                        END,
                        price ASC
                    LIMIT 1
                """
                cur.execute(psu_query, (required_power, psu_budget))
                psu = cur.fetchone()

                if not psu:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ë–ü
                    cur.execute("""
                        SELECT * FROM psu 
                        WHERE power >= ? 
                        ORDER BY price ASC 
                        LIMIT 1
                    """, (required_power,))
                    psu = cur.fetchone()

                if psu:
                    components['psu'] = dict(psu)
                    remaining_budget -= psu['price']
                else:
                    warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è —Å —Ç—Ä–µ–±—É–µ–º–æ–π –º–æ—â–Ω–æ—Å—Ç—å—é")

                # 8. –ü–æ–¥–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                case_query = """
                    SELECT * FROM cases 
                    WHERE price <= ? 
                    AND motherboard_form LIKE '%' || ? || '%'
                    {gpu_condition}
                    {cooler_condition}
                    ORDER BY rating DESC, price ASC
                    LIMIT 1
                """

                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ—Ä–ø—É—Å–∞
                conditions = {
                    'gpu_condition': "",
                    'cooler_condition': ""
                }
                params = [component_budgets['case'], components['motherboard']['form_factor']]

                # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
                if 'gpu' in components:
                    gpu_length = get_safe(components['gpu'], 'length', 300)
                    conditions['gpu_condition'] = "AND gpu_length >= ?"
                    params.append(gpu_length)

                # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                if potential_coolers:
                    cooler_type = get_safe(potential_coolers[0], 'type', 'air').lower()
                    if cooler_type == 'liquid':
                        conditions['cooler_condition'] = "AND lcs_sup = 'Y'"
                    else:
                        cooler_height = get_safe(potential_coolers[0], 'height', 160)
                        conditions['cooler_condition'] = "AND cooler_height >= ?"
                        params.append(cooler_height)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                final_case_query = case_query.format(**conditions)
                cur.execute(final_case_query, params)
                case = cur.fetchone()

                if case:
                    components['case'] = dict(case)
                    remaining_budget -= case['price']

                    # –í—ã–±–æ—Ä –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–ª–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –∫–æ—Ä–ø—É—Å–∞
                    selected_cooler = None
                    for cooler in potential_coolers:
                        cooler_type = get_safe(cooler, 'type', 'air').lower()
                        if cooler_type == 'liquid':
                            if get_safe(case, 'lcs_sup') == 'Y':
                                selected_cooler = cooler
                                break
                        else:
                            cooler_height = get_safe(cooler, 'height', 160)
                            case_max_height = get_safe(case, 'cooler_height', 200)
                            if cooler_height <= case_max_height:
                                selected_cooler = cooler
                                break

                    if selected_cooler:
                        components['cooling_system'] = selected_cooler
                        remaining_budget -= selected_cooler['price']
                    else:
                        warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è")
                else:
                    warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ—Ä–ø—É—Å")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                required_components = ['cpu', 'motherboard', 'ram', 'psu']
                if not all(comp in components for comp in required_components):
                    warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                    return None

                if warnings:
                    components['warnings'] = warnings

                return components

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ü–ö: {str(e)}", exc_info=True)
            return None

    @staticmethod
    def format_configuration(components: Dict, pc_type: str, budget: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        def get_price(component):
            if isinstance(component, dict):
                return component.get('price', 0)
            elif isinstance(component, list) and component and isinstance(component[0], dict):
                return sum(item.get('price', 0) for item in component)
            return 0

        total_price = sum(get_price(comp) for comp in components.values())
        used_budget_percent = (total_price / budget) * 100

        response = [
            f"üíª *{pc_type}* | –ë—é–¥–∂–µ—Ç: {budget} ‚ÇΩ",
            f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} ‚ÇΩ ({used_budget_percent:.1f}% –±—é–¥–∂–µ—Ç–∞)*",
            "",
            "‚öôÔ∏è *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*",
            "",
            f"üîπ *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:* {components['cpu']['manufacturer']} {components['cpu']['cpu_name']}",
            f"   - –Ø–¥–µ—Ä/–ø–æ—Ç–æ–∫–æ–≤: {components['cpu']['cores']}/{components['cpu']['threads']}",
            f"   - –ß–∞—Å—Ç–æ—Ç–∞: {components['cpu']['clock_frequency']} –ì–ì—Ü",
            f"   - TDP: {components['cpu'].get('heat_gen', '?')}W",
            f"   - –¶–µ–Ω–∞: {components['cpu']['price']} ‚ÇΩ",
            "",
            f"üîπ *–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞:* {components['motherboard']['manufacturer']} {components['motherboard']['motherboard_name']}",
            f"   - –§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä: {components['motherboard']['form_factor']}",
            f"   - –°–æ–∫–µ—Ç: {components['motherboard']['socket']}",
            f"   - –ß–∏–ø—Å–µ—Ç: {components['motherboard']['chipset']}",
            f"   - –¶–µ–Ω–∞: {components['motherboard']['price']} ‚ÇΩ",
            "",
            f"üîπ *–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:* {components['ram']['manufacturer']} {components['ram']['ram_name']}",
            f"   - –û–±—ä–µ–º: {components['ram']['amount']} –ì–ë",
            f"   - –¢–∏–ø: {components['ram']['ram_type']}",
            f"   - –ß–∞—Å—Ç–æ—Ç–∞: {components['ram']['clock_freq']} –ú–ì—Ü",
            f"   - –¶–µ–Ω–∞: {components['ram']['price']} ‚ÇΩ",
        ]

        if 'cooling_system' in components:
            cooling = components['cooling_system']
            if isinstance(cooling, dict):
                response.extend([
                    "",
                    f"üîπ *–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ:* {cooling['manufacturer']} {cooling['cs_name']}",
                    f"   - –¢–∏–ø: {cooling['type']}",
                    f"   - –†–∞—Å—Å–µ–∏–≤–∞–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å: {cooling.get('power_dissipation', '?')}W",
                    f"   - –¶–µ–Ω–∞: {cooling['price']} ‚ÇΩ"
                ])
            elif isinstance(cooling, list) and cooling:
                # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                cooling = cooling[0]
                response.extend([
                    "",
                    f"üîπ *–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ:* {cooling['manufacturer']} {cooling['cs_name']}",
                    f"   - –¢–∏–ø: {cooling['type']}",
                    f"   - –†–∞—Å—Å–µ–∏–≤–∞–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å: {cooling.get('power_dissipation', '?')}W",
                    f"   - –¶–µ–Ω–∞: {cooling['price']} ‚ÇΩ"
                ])

        if 'gpu' in components:
            gpu = components['gpu']
            response.extend([
                "",
                f"üîπ *–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:* {gpu['manufacturer']} {gpu['gpu_name']}",
                f"   - –í–∏–¥–µ–æ–ø–∞–º—è—Ç—å: {gpu['gpu_memory']} –ì–ë {gpu.get('memory_type', '')}",
                f"   - GPU: {gpu['gpu']} @ {gpu['gpu_freq']} –ú–ì—Ü",
                f"   - TDP: {gpu.get('energy', '?')}W",
                f"   - –¶–µ–Ω–∞: {gpu['price']} ‚ÇΩ"
            ])

        # –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏
        storage_info = []
        if 'nvme' in components:
            nvme = components['nvme']
            storage_info.append(
                f"\nüîπ *NVMe SSD:* {nvme['manufacturer']} {nvme['storage_name']}\n"
                f"   - –û–±—ä—ë–º: {nvme['capacity']}GB\n"
                f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {nvme['max_data_transfer_rate']} MB/s\n"
                f"   - –¶–µ–Ω–∞: {nvme['price']} ‚ÇΩ"
            )

        if 'ssd' in components:
            ssd = components['ssd']
            storage_info.append(
                f"\nüîπ *SATA SSD:* {ssd['manufacturer']} {ssd['storage_name']}\n"
                f"   - –û–±—ä—ë–º: {ssd['capacity']}GB\n"
                f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {ssd['max_data_transfer_rate']} MB/s\n"
                f"   - –¶–µ–Ω–∞: {ssd['price']} ‚ÇΩ"
            )

        if 'hdd' in components:
            hdd = components['hdd']
            storage_info.append(
                f"\nüîπ *HDD:* {hdd['manufacturer']} {hdd['storage_name']}\n"
                f"   - –û–±—ä—ë–º: {hdd['capacity']}GB\n"
                f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {hdd.get('spindle_speed', '?')} RPM\n"
                f"   - –¶–µ–Ω–∞: {hdd['price']} ‚ÇΩ"
            )

        if not storage_info:
            storage_info.append("\nüîπ *–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å:* –ù–µ –ø–æ–¥–æ–±—Ä–∞–Ω")
        response.extend(storage_info)

        # –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
        if 'psu' in components:
            psu = components['psu']
            response.extend([
                "",
                f"üîπ *–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è:* {psu['manufacturer']} {psu['psu_name']}",
                f"   - –ú–æ—â–Ω–æ—Å—Ç—å: {psu['power']}W",
                f"   - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {psu.get('certificate', '–Ω–µ—Ç')}",
                f"   - –¶–µ–Ω–∞: {psu['price']} ‚ÇΩ"
            ])

        # –ö–æ—Ä–ø—É—Å
        if 'case' in components:
            case = components['case']
            compatibility = ""
            if 'motherboard' in components:
                mb_form = components['motherboard']['form_factor']
                case_forms = case.get('motherboard_form', '')
                if mb_form and case_forms:
                    compatible = mb_form in case_forms
                    compatibility = "‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º" if compatible else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                else:
                    compatibility = "‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            response.extend([
                "",
                f"üîπ *–ö–æ—Ä–ø—É—Å:* {case['manufacturer']} {case['case_name']}",
                f"   - –§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä: {case['form_factor']}",
                f"   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility}",
                f"   - –¶–µ–Ω–∞: {case['price']} ‚ÇΩ"
            ])
        else:
            response.extend(["", "üîπ *–ö–æ—Ä–ø—É—Å:* –ù–µ –ø–æ–¥–æ–±—Ä–∞–Ω"])

        response.extend([
            "",
            "–í—ã –º–æ–∂–µ—Ç–µ:",
            "üî∏ –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            "üî∏ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ])

        return "\n".join(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ü–ö')],
        [types.KeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    welcome_text = (
        "üñ•Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ü–ö!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "üîπ –ü–æ–¥–æ–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
        "üîπ –°–æ–±—Ä–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–∑ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(Form.MAIN_MENU)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(F.text == 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_handler(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await start_handler(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–æ–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ü–ö"
@dp.message(Form.MAIN_MENU, F.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ü–ö')
async def ready_pc_handler(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä')],
        [types.KeyboardButton(text='–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä')],
        [types.KeyboardButton(text='–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä')],
        [types.KeyboardButton(text='–°–µ—Ä–≤–µ—Ä')],
        [types.KeyboardButton(text='–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')],
        [types.KeyboardButton(text='–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π')],
        [types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:",
        reply_markup=keyboard
    )
    await state.set_state(Form.CHOOSING_TYPE)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ü–ö
@dp.message(Form.CHOOSING_TYPE, F.text.in_([
    '–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä',
    '–°–µ—Ä–≤–µ—Ä', '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π'
]))
async def select_ready_pc_type(message: types.Message, state: FSMContext):
    await state.update_data(selected_type=message.text)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.WAITING_FOR_BUDGET)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ"
@dp.message(Form.MAIN_MENU, F.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ')
async def components_handler(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä')],
        [types.KeyboardButton(text='–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä')],
        [types.KeyboardButton(text='–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä')],
        [types.KeyboardButton(text='–°–µ—Ä–≤–µ—Ä')],
        [types.KeyboardButton(text='–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')],
        [types.KeyboardButton(text='–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π')],
        [types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(
        "–î–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –ü–ö –±—É–¥–µ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ?",
        reply_markup=keyboard
    )
    await state.set_state(Form.CONFIGURATION_START)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ü–ö –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
@dp.message(Form.CONFIGURATION_START, F.text.in_([
    '–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä', '–û—Ñ–∏—Å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä',
    '–°–µ—Ä–≤–µ—Ä', '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π'
]))
async def select_pc_type_for_components(message: types.Message, state: FSMContext):
    await state.update_data(selected_type=message.text)

    brands = PCBuilder.get_cpu_brands()
    if not brands:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤")
        return

    builder = ReplyKeyboardBuilder()
    for brand in brands:
        builder.add(types.KeyboardButton(text=brand))
    builder.add(types.KeyboardButton(text='–ë–µ–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π'))
    builder.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    builder.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(Form.CPU_BRAND_SELECTION)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
@dp.message(Form.CPU_BRAND_SELECTION)
async def process_cpu_brand_selection(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await components_handler(message, state)
        return

    cpu_brand = None if message.text == '–ë–µ–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π' else message.text
    await state.update_data(cpu_brand=cpu_brand)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.WAITING_FOR_BUDGET)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—é–¥–∂–µ—Ç–∞
@dp.message(Form.WAITING_FOR_BUDGET)
async def process_budget(message: types.Message, state: FSMContext):
    try:
        budget = int(message.text)
        if budget <= 0:
            raise ValueError

        data = await state.get_data()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–±–æ—Ä–∞ (–≥–æ—Ç–æ–≤—ã–π –ü–ö –∏–ª–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ)
        if 'cpu_brand' in data:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ - —ç—Ç–æ –ø–æ–¥–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
            pc_type = data['selected_type']
            cpu_brand = data['cpu_brand']

            components = PCBuilder.auto_build_pc(pc_type, budget, cpu_brand)

            if not components:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç.")
                return

            await state.update_data(components=components, budget=budget)
            await show_configuration(message, state)

        else:  # –ü–æ–¥–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –ü–ö
            selected_type = data['selected_type']
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ find_best_ready_pc –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            best_pc = PCBuilder.find_best_ready_pc(selected_type, budget)

            if not best_pc:
                await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ü–ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ format_pc_info
            response = PCBuilder.format_pc_info(best_pc)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞)
            builder = InlineKeyboardBuilder()
            if 'link' in best_pc.keys() and best_pc['link']:
                builder.row(types.InlineKeyboardButton(
                    text="üõí –ö—É–ø–∏—Ç—å", url=best_pc['link']
                ))

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            show_more_kb = [
                [types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç')],
                [types.KeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=show_more_kb, resize_keyboard=True)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ü–ö –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(response, reply_markup=builder.as_markup(), parse_mode="Markdown")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                shown_pcs=[best_pc['pc_name']],
                budget=budget,
                pc_type=selected_type
            )
            await state.set_state(Form.SHOW_NEXT_PC)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")


# –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def show_configuration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    components = data['components']
    pc_type = data['selected_type']
    budget = data['budget']

    response = PCBuilder.format_configuration(components, pc_type, budget)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    kb = [
        [types.KeyboardButton(text='üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É')],
        [types.KeyboardButton(text='üîÑ –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')],
        [types.KeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(Form.AUTO_BUILD_RESULT)


# –í—ã–≤–æ–¥ —Å—Å—ã–ª–æ–∫
@dp.message(Form.AUTO_BUILD_RESULT, F.text == 'üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É')
async def show_purchase_links(message: types.Message, state: FSMContext):
    data = await state.get_data()
    components = data['components']

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å
    for comp_type, comp in components.items():
        if comp.get('link'):
            name = {
                'cpu': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                'gpu': '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞',
                'ram': '–ü–∞–º—è—Ç—å',
                'storage': '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å',
                'motherboard': '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞',
                'psu': '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è',
                'case': '–ö–æ—Ä–ø—É—Å'
            }.get(comp_type, comp_type)

            builder.add(types.InlineKeyboardButton(
                text=f"–ö—É–ø–∏—Ç—å {name}",
                url=comp['link']
            ))

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    if builder.buttons:
        await message.answer(
            "–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
@dp.message(Form.AUTO_BUILD_RESULT, F.text == 'üîÑ –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
async def rebuild_configuration(message: types.Message, state: FSMContext):
    await components_handler(message, state)  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ü–ö


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(Form.AUTO_BUILD_RESULT, F.text == 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_to_main_from_config(message: types.Message, state: FSMContext):
    await start_handler(message, state)  # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—É


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç"
@dp.message(Form.SHOW_NEXT_PC, F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç')
async def show_next_pc_handler(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        shown_pcs = data.get('shown_pcs', [])
        pc_type = data['pc_type']
        budget = data['budget']

        next_pc = PCBuilder.find_next_ready_pc(pc_type, budget, shown_pcs)

        if not next_pc:
            await message.answer("‚ùå –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç.")
            return

        response = PCBuilder.format_pc_info(next_pc)

        builder = InlineKeyboardBuilder()
        if 'link' in next_pc.keys() and next_pc['link']:
            builder.row(types.InlineKeyboardButton(
                text="üõí –ö—É–ø–∏—Ç—å", url=next_pc['link']
            ))

        await message.answer(response, reply_markup=builder.as_markup(), parse_mode="Markdown")
        await state.update_data(shown_pcs=shown_pcs + [next_pc['pc_name']])

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ü–ö: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())